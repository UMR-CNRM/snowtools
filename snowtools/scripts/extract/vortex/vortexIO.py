#!/usr/bin/env python3
# -*- coding: utf-8 -*-

'''
Created on 8 march 2024

@author: Vernay

Extraction / Backup of common Flow resources (date-dependant)  with Vortex

For each resource a "get" and "put" methods are provided with a number of arguments
that can specified by the user.

Mandatory arguments are :
    * `datebegin` and `dateend` of the perdio covered by the resource
    * `xpid` of the experiment that produced the resource
    * `geometry` of the resource

All other arguments are optional and defined by default with standard names.
However it is possible to use this tool in a more advanced way by precising :
    * the `namespace` to precise where to get/put the resource. Possible values are:
        - 'vortex.cache.fr'   : the local Vortex cache
        - 'vortex.archive.fr' : Hendrix Vortex cache
        - 'vortex.multi.fr'   : both the local and Hendrix caches
        - TODO : inclure sxcen
    * the 'filename' of the target resource (its name in the working directory)
    * the number of 'members' for ensemble simulations (TODO : utiliser la syntaxe X-Y-1)
    * the 'vapp' ('s2m' or 'edelweiss' currently) TODO : ajuster en fonction de la convention choisie
    * an 'abspath' to look for a file not in the current workind directory (TODO : not implemented yet)
    * the 'block' (the last directory(ies) names where the resource is stored on the Vortex cache)
    * the 'source_app' to precise which application produced the resource
    * the 'source_conf' to precise the configuration of the producing application
    * the 'model' to precise the name of the model that produced the resource (TODO : redondant ?)
      NB : the last 3 arguments are only used for resources at the begining of the processing chain

Examples :
==========

>>> from snowtools.scripts.extract.vortex import vortexIO

1. To save a 'PRO.nc' file present in the current working directory
 - covering the period 2024031306 --> 2024031406
 - produced by an experiment "XP00"
 - on a "GrandesRousses250m" geometry (already defined in the .vortexrc/geometries.ini file)

>>> vortexIO.put_pro('2024031306', '2024031406', 'XP00', "GrandesRousses250m")

2. To get the FORCING file generated by the S2M analysis dev chain of 13/03/2024 at 6h in the cor massif geometry:

>>> vortexIO.get_forcing('2024031206', '2024031306', 'nouveaux_guess@vernaym', 'cor', vapp='s2m', block='massifs',
        namebuild=None, date='2024031306', source_app='arpege', source_conf='4dvarfr')

3. [THEORETICAL EXAMPLE] To get a 16-member ensemble of pro files from a user "username"
 - covering the period yyyymmddhh --> YYYYMMDDHH
 - produced by an experiment "a_nice_experiment"
 - on a "new_geometry" geometry (must be defined in the .vortexrc/geometries.ini file)
and name each PRO file "THIS_IS_A_PRO.nc" :

>>> vortexIO.get_pro('yyyymmddhh', 'YYYYMMDDHH', 'a_nice_experiment@username', 'new_geometry',
        members=16, filename="THIS_IS_A_PRO.nc")

TODO :
    - Ajouter les 2 premiers exemples dans la base de tests
    - Uniformiser la gestion du "role" (fixé pour chaque ressource ou modifiable en argument ?)

'''

import os
import vortex
import cen  # Import necessary to load vortex CEN-specific ressourees
from vortex import toolbox
from bronx.stdtypes.date import Date

import footprints

toolbox.active_now = True

t = vortex.ticket()

if 'MTOOLDIR' not in os.environ.keys():
    # Set a default MTOOLDIR to define the local Vortex cache
    os.environ['MTOOLDIR'] = os.path.join(os.environ['HOME'], 'cache')
    if not os.path.exists(os.environ['MTOOLDIR']):
        os.makedirs(os.environ['MTOOLDIR'])


def add_user(xpid):
    if '@' in xpid:
        return xpid
    else:
        user = os.environ['USER']
        return f'{xpid}@{user}'


def get(kind, datebegin, dateend, xpid, geometry, namespace, filename, nativefmt, members, vapp, namebuild, fatal,
        block=None, model=None, source_app=None, source_conf=None, date=None, abspath=None, scope=None, role=None,
        cutoff='assimilation'):
    """
    Main  method to fetch a Flow resource with Vortex
    """
    description = footprints_kitchen(**locals())  # Forward all arguments to the footprints_kitchen function
    tb = toolbox.input(**description)
    return tb


def put(kind, datebegin, dateend, xpid, geometry, namespace, filename, nativefmt, members, vapp, namebuild, fatal,
        block=None, model=None, source_app=None, source_conf=None, date=None, abspath=None, scope=None, role=None,
        cutoff=None):
    """
    Main  method to save a Flow resource with Vortex
    """
    description = footprints_kitchen(**locals())  # Forward all arguments to the footprints_kitchen function
    tb = toolbox.output(**description)
    return tb


def footprints_kitchen(kind, datebegin, dateend, xpid, geometry, namespace, filename, nativefmt, members, vapp,
                       namebuild, fatal, block=None, model=None, source_app=None, source_conf=None, date=None,
                       abspath=None, scope=None, role=None, cutoff='assimilation'):

    # TODO : grouper les footprints par ressource/provider/container
    description = dict(
        role           = role,
        kind           = kind,
        local          = f'mb[member]/{filename}' if members is not None else filename,
        nativefmt      = nativefmt,
        experiment     = add_user(xpid),
        geometry       = geometry,
        # CEN's convention is to name period footprints 'datebegin' and 'dateend', but
        # Vortex's convention is to name period footprints 'begindate'/'enddate'
        # An alias in cen/syntax/stdattrs.py ensures the equivalence
        begindate      = Date(datebegin),
        enddate        = Date(dateend),
        vapp           = vapp,
        scope          = scope,
        vconf          = '[geometry:tag]',
        model          = model,
        cutoff         = cutoff,
        source_app     = source_app,
        source_conf    = source_conf,
        namespace      = namespace,
        namebuild      = namebuild,
        block          = block,
        fatal          = fatal
    )

    # On peut actuellement passer à 'membres' un entier (le nombre de membres)
    # ou un objet convertible en FPLIst (string au format X-Y-1)
    # TODO : gérer ça plus proprement
    # TODO : uniformiser la gestion des membres
    if isinstance(members, int):
        description['member'] = footprints.util.rangex(0, members - 1)
    elif isinstance(members, str):
        description['member'] = footprints.util.rangex(members)

    if 'sxcen' in namespace:
        description['storage'] = 'sxcen.cnrm.meteo.fr'

#    if scope == 'SesonalSnowCoverDiagnostic':
        # CEN's convention is to name period footprints 'datebegin' and 'dateend', but for SURFEX diagnostics
        # we use objects from common.data.diagnostics.SurfexPeriodDiagnostics with `begindate` and `enddate`
        # footprints...
#        description['begindate'] = description.pop('datebegin')
#        description['enddate']   = description.pop('dateend')

    return description


def get_pro(datebegin, dateend, xpid, geometry, namespace='vortex.multi.fr', filename='PRO.nc', members=None,
            vapp='s2m', abspath=None, block='pro', date=None, namebuild='flat@cen', fatal=True,
            role='SnowpackSimulation', **kw):

    # PRO-specific footprints
    kind      = 'SnowpackSimulation'
    model     = 'surfex'
    nativefmt = 'netcdf'

    pro = get(kind, datebegin, dateend, xpid, geometry, namespace, filename, nativefmt, members, vapp,
              namebuild, fatal, block=block, abspath=abspath, date=date, model=model, role=role)

    print(t.prompt, 'PRO input =', pro)
    print()


def put_pro(datebegin, dateend, xpid, geometry, namespace='vortex.multi.fr', filename='PRO.nc',
            members=None, vapp='s2m', abspath=None, block='pro', date=None, namebuild='flat@cen', fatal=True,
            role='SnowpackSimulation', **kw):

    # PRO-specific footprints
    kind      = 'SnowpackSimulation'
    model     = 'surfex'
    nativefmt = 'netcdf'

    pro = put(kind, datebegin, dateend, xpid, geometry, namespace, filename, nativefmt, members, vapp,
              namebuild, fatal, block=block, abspath=abspath, date=date, model=model, role=role)

    print(t.prompt, 'PRO output =', pro)
    print()


def get_diag(datebegin, dateend, xpid, geometry, namespace='vortex.multi.fr', filename='DIAG.nc',
             members=None, vapp='s2m', block='diag', abspath=None, namebuild='flat@cen', fatal=True,
             role='SnowpackDiagnostics', **kw):

    # DIAG-specific footprints
    kind      = 'diagnostics'
    scope     = 'SesonalSnowCoverDiagnostic'
    nativefmt = 'netcdf'
    model     = 'surfex'

    diag = get(kind, datebegin, dateend, xpid, geometry, namespace, filename, nativefmt, members, vapp,
               namebuild, fatal, block=block, abspath=abspath, model=model, scope=scope, role=role)

    print(t.prompt, 'DIAG input =', diag)
    print()


def put_diag(datebegin, dateend, xpid, geometry, namespace='vortex.multi.fr', filename='DIAG.nc',
             members=None, vapp='s2m', block='diag', abspath=None, namebuild='flat@cen', fatal=True,
             role='SnowpackDiagnostics', **kw):

    # DIAG-specific footprints
    kind      = 'diagnostics'
    scope     = 'SesonalSnowCoverDiagnostic'
    nativefmt = 'netcdf'
    model     = 'surfex'

    diag = put(kind, datebegin, dateend, xpid, geometry, namespace, filename, nativefmt, members, vapp,
               namebuild, fatal, block=block, abspath=abspath, model=model, scope=scope, role=role)

    print(t.prompt, 'DIAG ouput =', diag)
    print()


def get_forcing(datebegin, dateend, xpid, geometry, namespace='vortex.multi.fr', filename='FORCING.nc', model='safran',
                members=None, vapp='s2m', block='meteo', abspath=None, source_app=None, source_conf=None,
                date=None, namebuild='flat@cen', fatal=True, cutoff='assimilation', **kw):

    # FORCING-specific footprints
    role      = 'Forcing'
    kind      = 'MeteorologicalForcing'
    nativefmt = 'netcdf'

    forcing = get(kind, datebegin, dateend, xpid, geometry, namespace, filename, nativefmt, members, vapp,
                  namebuild, fatal, block=block, abspath=abspath, source_app=source_app, source_conf=source_conf,
                  date=date, model=model, role=role, cutoff=cutoff)

    print(t.prompt, 'FORCING input =', forcing)
    print()


def put_forcing(datebegin, dateend, xpid, geometry, namespace='vortex.multi.fr', filename='FORCING.nc', model='safran',
                members=None, vapp='s2m', block='meteo', abspath=None, source_app=None, source_conf=None,
                date=None, namebuild='flat@cen', fatal=True, cutoff='assimilation', **kw):

    # FORCING-specific footprints
    role      = 'Forcing'
    kind      = 'MeteorologicalForcing'
    nativefmt = 'netcdf'

    forcing = put(kind, datebegin, dateend, xpid, geometry, namespace, filename, nativefmt, members, vapp,
                  namebuild, fatal, block=block, abspath=abspath, source_app=source_app, source_conf=source_conf,
                  date=date, model=model, role=role, cutoff=cutoff)

    print(t.prompt, 'FORCING output =', forcing)
    print()


def get_precipitation(datebegin, dateend, xpid, geometry, namespace='vortex.multi.fr', filename='PRECIPITATION.nc',
                      members=None, vapp='s2m', block='', abspath=None, source_app=None, source_conf=None,
                      model=None, date=None, namebuild='flat@cen', fatal=True, **kw):

    # Precipitation-specific footprints
    role      = 'Precipitation'
    kind      = 'Precipitation'
    nativefmt = 'netcdf'

    precipitation = get(kind, datebegin, dateend, xpid, geometry, namespace, filename, nativefmt, members, vapp,
                        namebuild, fatal, block=block, abspath=abspath, source_app=source_app, source_conf=source_conf,
                        date=date, model=model, role=role)

    print(t.prompt, 'PRECIPITATION input =', precipitation)
    print()


def put_precipitation(datebegin, dateend, xpid, geometry, namespace='vortex.multi.fr', filename='PRECIPITATION.nc',
                      members=None, vapp='s2m', block='', abspath=None, source_app=None, source_conf=None,
                      model=None, date=None, namebuild='flat@cen', fatal=True, **kw):

    # Precipitation-specific footprints
    role      = 'Precipitation'
    kind      = 'Precipitation'
    nativefmt = 'netcdf'

    precipitation = put(kind, datebegin, dateend, xpid, geometry, namespace, filename, nativefmt, members, vapp,
                        namebuild, fatal, block=block, abspath=abspath, source_app=source_app, source_conf=source_conf,
                        date=date, model=model, role=role)

    print(t.prompt, 'PRECIPITATION output =', precipitation)
    print()


def get_wind(datebegin, dateend, xpid, geometry, namespace='vortex.multi.fr', filename='WIND.nc',
             members=None, vapp='s2m', block='', abspath=None, source_app='arome', source_conf='devine',
             model='devine', date=None, namebuild='flat@cen', fatal=True, **kw):

    # Wind-specific footprints
    role      = 'Wind'
    kind      = 'Wind'
    nativefmt = 'netcdf'

    wind = get(kind, datebegin, dateend, xpid, geometry, namespace, filename, nativefmt, members, vapp,
               namebuild, fatal, block=block, abspath=abspath, source_app=source_app, source_conf=source_conf,
               date=date, model=model, role=role)

    print(t.prompt, 'WIND input =', wind)
    print()


def put_wind(datebegin, dateend, xpid, geometry, namespace='vortex.multi.fr', filename='WIND.nc',
             members=None, vapp='s2m', block='', abspath=None, source_app='arome', source_conf='devine',
             model='devine', date=None, namebuild='flat@cen', fatal=True, **kw):

    # Wind-specific footprints
    role      = 'Wind'
    kind      = 'Wind'
    nativefmt = 'netcdf'

    wind = put(kind, datebegin, dateend, xpid, geometry, namespace, filename, nativefmt, members, vapp,
               namebuild, fatal, block=block, abspath=abspath, source_app=source_app, source_conf=source_conf,
               date=date, model=model, role=role)

    print(t.prompt, 'WIND output =', wind)
    print()

#######################################################################################################################
# WARNING : functions bellow this point are in development
#######################################################################################################################


def put_snow_obs_period(datebegin, dateend, xpid, geometry, namespace='vortex.multi.fr', filename='SnowObs.nc',
                        vapp='s2m', block='', abspath=None, date=None, namebuild='flat@cen', fatal=True, **kw):

    # Specific footprints
    members   = None
    kind      = 'SnowObservations'
    model     = 'surfex'
    nativefmt = 'netcdf'

    obs = put(kind, datebegin, dateend, xpid, geometry, namespace, filename, nativefmt, members, vapp,
              namebuild, fatal, block=block, abspath=abspath, model=model)

    print(t.prompt, 'SnowObsPeriod output =', obs)
    print()


def get_snow_obs_period(datebegin, dateend, xpid, geometry, namespace='vortex.multi.fr', filename='SnowObs.nc',
                        vapp='s2m', block='', abspath=None, date=None, namebuild='flat@cen', fatal=True, **kw):

    # Specific footprints
    members   = None
    kind      = 'SnowObservations'
    model     = 'surfex'
    nativefmt = 'netcdf'

    obs = get(kind, datebegin, dateend, xpid, geometry, namespace, filename, nativefmt, members, vapp,
              namebuild, fatal, block=block, abspath=abspath, model=model)

    print(t.prompt, 'SnowObsPeriod input =', obs)
    print()


def get_mask(uenv=None, filename='mask.nc', fmt='netcdf', intent='in', fatal=False, **kw):

    mask = toolbox.input(
        kind           = 'mask',
        gvar           = 'mask',
        genv           = uenv,
        local          = filename,
        nativefmt      = fmt,
        intent         = intent,  # 'in' = make a hard link rather than a copy
        fatal          = fatal,
    ),
    print(t.prompt, 'MASK input =', mask)
    print()

    return mask
